generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  contact   String?  // Optional contact number
  password  String
  role      String   @default("user") // 'user' or 'admin'
  passwordResetToken   String?
  passwordResetExpires DateTime?
  createdAt DateTime @default(now())
  slots     Slot[]   @relation("Slot_user")
  vehicles  Vehicle[] @relation("User_vehicles")
  reservationHistory ReservationHistory[]
  feedback           Feedback[]
}

model Vehicle {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  licensePlate String   @unique
  model        String
  color        String
  type         String // New field for vehicle type
  ownerId      String   @db.ObjectId
  owner        User     @relation("User_vehicles", fields: [ownerId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  slots            Slot[]           @relation("Slot_vehicle")
  parkingSessions ParkingSession[]
  reservationHistory ReservationHistory[]
}

model ParkingSession {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId   String   @db.ObjectId
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
  slotId      String   @db.ObjectId
  slot        Slot     @relation(fields: [slotId], references: [id])
  checkInTime DateTime @default(now())
  checkOutTime DateTime?
  duration    Int? // Duration in minutes
  fee         Int? // Calculated parking fee
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Slot {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  location        String           @unique
  status          String           @default("Available")
  type            String? // Type of vehicle allowed in this slot (car, bike, suv, van, minibus)
  reservedBy      String?          @db.ObjectId
  user            User?            @relation("Slot_user", fields: [reservedBy], references: [id])
  vehicleId       String?          @db.ObjectId
  vehicle         Vehicle?         @relation("Slot_vehicle", fields: [vehicleId], references: [id])
  bookingStart    DateTime?
  bookingEnd      DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  parkingSessions ParkingSession[]
  reservationHistory ReservationHistory[]
}

model ReservationHistory {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  slotId          String   @db.ObjectId
  slot            Slot?    @relation(fields: [slotId], references: [id])
  vehicleId       String?  @db.ObjectId // Make vehicleId optional
  vehicle         Vehicle? @relation(fields: [vehicleId], references: [id]) // Make vehicle relation optional
  slotLocation    String   // Store slot location at time of reservation
  vehiclePlate    String   // Store vehicle license plate at time of reservation
  vehicleModel    String   // Store vehicle model at time of reservation
  vehicleType     String   // Store vehicle type at time of reservation
  reservedStart   DateTime // Original reservation start time
  reservedEnd     DateTime // Original reservation end time
  checkInTime     DateTime? // Actual check-in time
  checkOutTime    DateTime? // Actual check-out time
  duration        Int      // Duration in minutes
  fee             Int?     // Calculated parking fee
  paymentStatus   String   @default("Not Paid") // Payment status: "Paid" or "Not Paid"
  violationType   String?  // e.g., 'Overstay', 'Improper Parking'
  penaltyFee      Int?     // Penalty fee in addition to parking fee
  createdAt       DateTime @default(now())
  paymentInvoice  PaymentInvoice? // Link to payment invoice when paid
  feedback        Feedback? // Link to feedback
}

model PaymentInvoice {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  reservationHistoryId  String   @unique @db.ObjectId
  reservationHistory    ReservationHistory @relation(fields: [reservationHistoryId], references: [id])
  invoiceNumber         String   @unique // Auto-generated invoice number

  // User details at time of payment
  userName              String
  userEmail             String
  userContact           String?

  // Vehicle details at time of payment
  vehiclePlate          String
  vehicleModel          String
  vehicleType           String

  // Parking details
  slotLocation          String
  checkInTime           DateTime
  checkOutTime          DateTime
  duration              Int      // Duration in minutes

  // Fee breakdown
  hourlyRate            Int      // Rate per hour for the vehicle type
  parkingFee            Int      // Calculated parking fee (rate * duration)
  onlineReservationFee  Int      // Online reservation fee (20 taka)
  totalAmount           Int      // Total amount paid
  violationType         String?  // e.g., 'Overstay', 'Improper Parking'
  penaltyFee            Int?     // Penalty fee in addition to parking fee

  // Payment details
  paymentMethod         String   @default("Online") // Payment method
  paymentDate           DateTime @default(now())
  paymentStatus         String   @default("Paid")

  createdAt             DateTime @default(now())
}

model Feedback {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  rating               Int
  comment              String?
  userId               String   @db.ObjectId
  user                 User     @relation(fields: [userId], references: [id])
  reservationHistoryId String   @unique @db.ObjectId
  reservationHistory   ReservationHistory @relation(fields: [reservationHistoryId], references: [id])
  createdAt            DateTime @default(now())
}



